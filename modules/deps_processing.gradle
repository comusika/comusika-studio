// Downloadable dependencies processing

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "at.bxm.gradleplugins:gradle-svntools-plugin:2.2"
        classpath "org.tmatesoft.svnkit:svnkit:1.10.1"
    }
}

import at.bxm.gradleplugins.svntools.tasks.SvnExport
import at.bxm.gradleplugins.svntools.internal.SvnSupport
import at.bxm.gradleplugins.svntools.internal.SvnProxy
import at.bxm.gradleplugins.svntools.SvnToolsPluginExtension
import org.gradle.api.InvalidUserDataException
import org.tmatesoft.svn.core.SVNDepth
import org.tmatesoft.svn.core.SVNException
import org.tmatesoft.svn.core.SVNURL
import org.tmatesoft.svn.core.wc.SVNRevision

def fetchModule(String svnUrl, targetDir, Long revision) {
    def svnClient = SvnSupport.createSvnClientManager(null, null, new SvnProxy())
    def rev = SvnSupport.revisionFrom(revision)
    def repoUrl
    try {
      repoUrl = SVNURL.parseURIEncoded(svnUrl)
    } catch (SVNException e) {
      throw new InvalidUserDataException("Invalid svnUrl value: $svnUrl", e)
    }
    if (!targetDir) {
      throw new InvalidUserDataException("targetDir must be specified")
    }
    def dir = targetDir instanceof File ? targetDir : targetDir.toString() as File
    if (dir.exists()) {
      if (!dir.isDirectory()) {
        throw new InvalidUserDataException("targetDir $dir.absolutePath must be a directory")
      }
      if (dir.list()) {
        throw new InvalidUserDataException("targetDir $dir.absolutePath must be an empty directory")
      }
    }
    try {
      svnClient.updateClient.doExport(repoUrl, dir, SVNRevision.UNDEFINED, rev, null, true, SVNDepth.INFINITY)
    } catch (SVNException e) {
      throw new InvalidUserDataException("svn-export failed for $svnUrl\n" + e.message, e)
    }
}

// - local maven repository module will be used if available
// - otherwise module will be download to deps directory
project.dependencies.ext.moduleDep = { depsName, packageName, directoryName, moduleName ->
    if ((ext.has('depsRoot') && depsName == ext.depsRoot) || depsName == ext.depsThis) {
        return project(":${directoryName}:${moduleName}")
    }

    def depVersion = ext['deps' + depsName].version
    def depGithubProfile = ext['deps' + depsName].githubProfile
    def depGithubRepo = ext['deps' + depsName].githubRepo

    def mavenModuleDir = repositories.mavenLocal().url.path + packageName.replace('.', '/') + '/' + moduleName + '/' + depVersion
    if (new File(mavenModuleDir).isDirectory()) {
        // Use maven package if available
        return "${packageName}:${moduleName}:${depVersion}"
    }

    def depsDir = rootProject.buildDir.parent + '/deps/'
    if (gradle.startParameter.taskNames == ['clean']) {
        return project(':deps')
    }

    def depModuleDir = depsDir + moduleName
    if (!new File(depModuleDir).isDirectory()) {
        // Download module
        def githubModulePath = "https://github.com/${depGithubProfile}/${depGithubRepo}/trunk/${directoryName}/${moduleName}"
        println 'Downloading ' + githubModulePath

        fetchModule(githubModulePath, depModuleDir, null)
        
        // Reports new module was downloaded -> need another sweep of dependency resolution
        if (!new File(depsDir + ".downloaded").exists()) {
            new File(depsDir + ".downloaded").createNewFile()
        }
        return project(':deps')
    }

    if (new File(depsDir + ".downloaded").exists()) {
        return project(':deps')
    }

    return project(':deps:' + moduleName)
}

project.dependencies.ext.moduleDepPath = { depsName, directoryName, moduleName ->
    if (!ext.has('depsRoot') || depsName == ext.depsRoot) {
        return ":${directoryName}:${moduleName}"
    }

    return ":deps:${moduleName}"
}
